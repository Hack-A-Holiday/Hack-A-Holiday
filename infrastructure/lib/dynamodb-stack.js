"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDBStack = void 0;
const cdk = require("aws-cdk-lib");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
class DynamoDBStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const { environment } = props;
        // Users Table
        this.usersTable = new dynamodb.Table(this, 'UsersTable', {
            tableName: `TravelCompanion-Users-${environment}`,
            partitionKey: {
                name: 'PK',
                type: dynamodb.AttributeType.STRING,
            },
            sortKey: {
                name: 'SK',
                type: dynamodb.AttributeType.STRING,
            },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            encryption: dynamodb.TableEncryption.AWS_MANAGED,
            pointInTimeRecovery: true,
            removalPolicy: environment === 'prod'
                ? cdk.RemovalPolicy.RETAIN
                : cdk.RemovalPolicy.DESTROY,
        });
        // GSI for email lookup
        this.usersTable.addGlobalSecondaryIndex({
            indexName: 'GSI1',
            partitionKey: {
                name: 'GSI1PK',
                type: dynamodb.AttributeType.STRING,
            },
            sortKey: {
                name: 'GSI1SK',
                type: dynamodb.AttributeType.STRING,
            },
        });
        // Trips Table
        this.tripsTable = new dynamodb.Table(this, 'TripsTable', {
            tableName: `TravelCompanion-Trips-${environment}`,
            partitionKey: {
                name: 'PK',
                type: dynamodb.AttributeType.STRING,
            },
            sortKey: {
                name: 'SK',
                type: dynamodb.AttributeType.STRING,
            },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            encryption: dynamodb.TableEncryption.AWS_MANAGED,
            pointInTimeRecovery: true,
            removalPolicy: environment === 'prod'
                ? cdk.RemovalPolicy.RETAIN
                : cdk.RemovalPolicy.DESTROY,
        });
        // GSI for user trips lookup
        this.tripsTable.addGlobalSecondaryIndex({
            indexName: 'GSI1',
            partitionKey: {
                name: 'GSI1PK',
                type: dynamodb.AttributeType.STRING,
            },
            sortKey: {
                name: 'GSI1SK',
                type: dynamodb.AttributeType.STRING,
            },
        });
        // Bookings Table
        this.bookingsTable = new dynamodb.Table(this, 'BookingsTable', {
            tableName: `TravelCompanion-Bookings-${environment}`,
            partitionKey: {
                name: 'PK',
                type: dynamodb.AttributeType.STRING,
            },
            sortKey: {
                name: 'SK',
                type: dynamodb.AttributeType.STRING,
            },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            encryption: dynamodb.TableEncryption.AWS_MANAGED,
            pointInTimeRecovery: true,
            removalPolicy: environment === 'prod'
                ? cdk.RemovalPolicy.RETAIN
                : cdk.RemovalPolicy.DESTROY,
        });
        // GSI for trip bookings lookup
        this.bookingsTable.addGlobalSecondaryIndex({
            indexName: 'GSI1',
            partitionKey: {
                name: 'GSI1PK',
                type: dynamodb.AttributeType.STRING,
            },
            sortKey: {
                name: 'GSI1SK',
                type: dynamodb.AttributeType.STRING,
            },
        });
        // Output table names for use in other stacks
        new cdk.CfnOutput(this, 'UsersTableName', {
            value: this.usersTable.tableName,
            exportName: `${environment}-UsersTableName`,
        });
        new cdk.CfnOutput(this, 'TripsTableName', {
            value: this.tripsTable.tableName,
            exportName: `${environment}-TripsTableName`,
        });
        new cdk.CfnOutput(this, 'BookingsTableName', {
            value: this.bookingsTable.tableName,
            exportName: `${environment}-BookingsTableName`,
        });
        // Output table ARNs for IAM policies
        new cdk.CfnOutput(this, 'UsersTableArn', {
            value: this.usersTable.tableArn,
            exportName: `${environment}-UsersTableArn`,
        });
        new cdk.CfnOutput(this, 'TripsTableArn', {
            value: this.tripsTable.tableArn,
            exportName: `${environment}-TripsTableArn`,
        });
        new cdk.CfnOutput(this, 'BookingsTableArn', {
            value: this.bookingsTable.tableArn,
            exportName: `${environment}-BookingsTableArn`,
        });
        // Tags for cost tracking
        cdk.Tags.of(this).add('Project', 'TravelCompanion');
        cdk.Tags.of(this).add('Environment', environment);
        cdk.Tags.of(this).add('Component', 'Database');
    }
}
exports.DynamoDBStack = DynamoDBStack;
//# sourceMappingURL=data:application/json;base64,