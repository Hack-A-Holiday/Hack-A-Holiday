#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const dynamodb_stack_1 = require("./dynamodb-stack");
const s3_stack_1 = require("./s3-stack");
const lambda_stack_1 = require("./lambda-stack");
const app = new cdk.App();
// Get environment from context or default to 'dev'
const environment = app.node.tryGetContext('environment') || 'dev';
const account = process.env.CDK_DEFAULT_ACCOUNT;
const region = process.env.CDK_DEFAULT_REGION || 'us-east-1';
console.log(`Deploying to environment: ${environment}`);
console.log(`Account: ${account}`);
console.log(`Region: ${region}`);
const env = { account, region };
// Deploy DynamoDB stack first
const dynamoStack = new dynamodb_stack_1.DynamoDBStack(app, `TravelCompanion-DynamoDB-${environment}`, {
    env,
    environment,
    description: `DynamoDB tables for Travel Companion - ${environment}`,
});
// Deploy S3 stack
const s3Stack = new s3_stack_1.S3Stack(app, `TravelCompanion-S3-${environment}`, {
    env,
    environment,
    description: `S3 buckets and CloudFront for Travel Companion - ${environment}`,
});
// Deploy Lambda stack (depends on DynamoDB and S3)
const lambdaStack = new lambda_stack_1.LambdaStack(app, `TravelCompanion-Lambda-${environment}`, {
    env,
    environment,
    usersTableName: dynamoStack.usersTable.tableName,
    tripsTableName: dynamoStack.tripsTable.tableName,
    bookingsTableName: dynamoStack.bookingsTable.tableName,
    s3BucketName: s3Stack.itineraryBucket.bucketName,
    description: `Lambda functions and API Gateway for Travel Companion - ${environment}`,
});
// Add dependencies
lambdaStack.addDependency(dynamoStack);
lambdaStack.addDependency(s3Stack);
// Add tags to all stacks
const tags = {
    Project: 'TravelCompanion',
    Environment: environment,
    Owner: 'TravelCompanionTeam',
    CostCenter: 'Development',
};
Object.entries(tags).forEach(([key, value]) => {
    cdk.Tags.of(app).add(key, value);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1DQUFtQztBQUNuQyxxREFBaUQ7QUFDakQseUNBQXFDO0FBQ3JDLGlEQUE2QztBQUU3QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixtREFBbUQ7QUFDbkQsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDO0FBQ25FLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDaEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxXQUFXLENBQUM7QUFFN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUVqQyxNQUFNLEdBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUVoQyw4QkFBOEI7QUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSw0QkFBNEIsV0FBVyxFQUFFLEVBQUU7SUFDcEYsR0FBRztJQUNILFdBQVc7SUFDWCxXQUFXLEVBQUUsMENBQTBDLFdBQVcsRUFBRTtDQUNyRSxDQUFDLENBQUM7QUFFSCxrQkFBa0I7QUFDbEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBTyxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsV0FBVyxFQUFFLEVBQUU7SUFDcEUsR0FBRztJQUNILFdBQVc7SUFDWCxXQUFXLEVBQUUsb0RBQW9ELFdBQVcsRUFBRTtDQUMvRSxDQUFDLENBQUM7QUFFSCxtREFBbUQ7QUFDbkQsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsV0FBVyxFQUFFLEVBQUU7SUFDaEYsR0FBRztJQUNILFdBQVc7SUFDWCxjQUFjLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTO0lBQ2hELGNBQWMsRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLFNBQVM7SUFDaEQsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTO0lBQ3RELFlBQVksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFVBQVU7SUFDaEQsV0FBVyxFQUFFLDJEQUEyRCxXQUFXLEVBQUU7Q0FDdEYsQ0FBQyxDQUFDO0FBRUgsbUJBQW1CO0FBQ25CLFdBQVcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVuQyx5QkFBeUI7QUFDekIsTUFBTSxJQUFJLEdBQUc7SUFDWCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLEtBQUssRUFBRSxxQkFBcUI7SUFDNUIsVUFBVSxFQUFFLGFBQWE7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtJQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IER5bmFtb0RCU3RhY2sgfSBmcm9tICcuL2R5bmFtb2RiLXN0YWNrJztcbmltcG9ydCB7IFMzU3RhY2sgfSBmcm9tICcuL3MzLXN0YWNrJztcbmltcG9ydCB7IExhbWJkYVN0YWNrIH0gZnJvbSAnLi9sYW1iZGEtc3RhY2snO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG4vLyBHZXQgZW52aXJvbm1lbnQgZnJvbSBjb250ZXh0IG9yIGRlZmF1bHQgdG8gJ2RldidcbmNvbnN0IGVudmlyb25tZW50ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52aXJvbm1lbnQnKSB8fCAnZGV2JztcbmNvbnN0IGFjY291bnQgPSBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5UO1xuY29uc3QgcmVnaW9uID0gcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIHx8ICd1cy1lYXN0LTEnO1xuXG5jb25zb2xlLmxvZyhgRGVwbG95aW5nIHRvIGVudmlyb25tZW50OiAke2Vudmlyb25tZW50fWApO1xuY29uc29sZS5sb2coYEFjY291bnQ6ICR7YWNjb3VudH1gKTtcbmNvbnNvbGUubG9nKGBSZWdpb246ICR7cmVnaW9ufWApO1xuXG5jb25zdCBlbnYgPSB7IGFjY291bnQsIHJlZ2lvbiB9O1xuXG4vLyBEZXBsb3kgRHluYW1vREIgc3RhY2sgZmlyc3RcbmNvbnN0IGR5bmFtb1N0YWNrID0gbmV3IER5bmFtb0RCU3RhY2soYXBwLCBgVHJhdmVsQ29tcGFuaW9uLUR5bmFtb0RCLSR7ZW52aXJvbm1lbnR9YCwge1xuICBlbnYsXG4gIGVudmlyb25tZW50LFxuICBkZXNjcmlwdGlvbjogYER5bmFtb0RCIHRhYmxlcyBmb3IgVHJhdmVsIENvbXBhbmlvbiAtICR7ZW52aXJvbm1lbnR9YCxcbn0pO1xuXG4vLyBEZXBsb3kgUzMgc3RhY2tcbmNvbnN0IHMzU3RhY2sgPSBuZXcgUzNTdGFjayhhcHAsIGBUcmF2ZWxDb21wYW5pb24tUzMtJHtlbnZpcm9ubWVudH1gLCB7XG4gIGVudixcbiAgZW52aXJvbm1lbnQsXG4gIGRlc2NyaXB0aW9uOiBgUzMgYnVja2V0cyBhbmQgQ2xvdWRGcm9udCBmb3IgVHJhdmVsIENvbXBhbmlvbiAtICR7ZW52aXJvbm1lbnR9YCxcbn0pO1xuXG4vLyBEZXBsb3kgTGFtYmRhIHN0YWNrIChkZXBlbmRzIG9uIER5bmFtb0RCIGFuZCBTMylcbmNvbnN0IGxhbWJkYVN0YWNrID0gbmV3IExhbWJkYVN0YWNrKGFwcCwgYFRyYXZlbENvbXBhbmlvbi1MYW1iZGEtJHtlbnZpcm9ubWVudH1gLCB7XG4gIGVudixcbiAgZW52aXJvbm1lbnQsXG4gIHVzZXJzVGFibGVOYW1lOiBkeW5hbW9TdGFjay51c2Vyc1RhYmxlLnRhYmxlTmFtZSxcbiAgdHJpcHNUYWJsZU5hbWU6IGR5bmFtb1N0YWNrLnRyaXBzVGFibGUudGFibGVOYW1lLFxuICBib29raW5nc1RhYmxlTmFtZTogZHluYW1vU3RhY2suYm9va2luZ3NUYWJsZS50YWJsZU5hbWUsXG4gIHMzQnVja2V0TmFtZTogczNTdGFjay5pdGluZXJhcnlCdWNrZXQuYnVja2V0TmFtZSxcbiAgZGVzY3JpcHRpb246IGBMYW1iZGEgZnVuY3Rpb25zIGFuZCBBUEkgR2F0ZXdheSBmb3IgVHJhdmVsIENvbXBhbmlvbiAtICR7ZW52aXJvbm1lbnR9YCxcbn0pO1xuXG4vLyBBZGQgZGVwZW5kZW5jaWVzXG5sYW1iZGFTdGFjay5hZGREZXBlbmRlbmN5KGR5bmFtb1N0YWNrKTtcbmxhbWJkYVN0YWNrLmFkZERlcGVuZGVuY3koczNTdGFjayk7XG5cbi8vIEFkZCB0YWdzIHRvIGFsbCBzdGFja3NcbmNvbnN0IHRhZ3MgPSB7XG4gIFByb2plY3Q6ICdUcmF2ZWxDb21wYW5pb24nLFxuICBFbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXG4gIE93bmVyOiAnVHJhdmVsQ29tcGFuaW9uVGVhbScsXG4gIENvc3RDZW50ZXI6ICdEZXZlbG9wbWVudCcsXG59O1xuXG5PYmplY3QuZW50cmllcyh0YWdzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgY2RrLlRhZ3Mub2YoYXBwKS5hZGQoa2V5LCB2YWx1ZSk7XG59KTsiXX0=