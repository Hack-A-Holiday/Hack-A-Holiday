#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const dynamodb_stack_1 = require("./dynamodb-stack");
const s3_stack_1 = require("./s3-stack");
const app = new cdk.App();
// Get environment from context or default to 'dev'
const environment = app.node.tryGetContext('environment') || 'dev';
const account = process.env.CDK_DEFAULT_ACCOUNT;
const region = process.env.CDK_DEFAULT_REGION || 'us-east-1';
console.log(`Deploying to environment: ${environment}`);
console.log(`Account: ${account}`);
console.log(`Region: ${region}`);
const env = { account, region };
// Deploy DynamoDB stack first
const dynamoStack = new dynamodb_stack_1.DynamoDBStack(app, `TravelCompanion-DynamoDB-${environment}`, {
    env,
    environment,
    description: `DynamoDB tables for Travel Companion - ${environment}`,
});
// Deploy S3 stack
const s3Stack = new s3_stack_1.S3Stack(app, `TravelCompanion-S3-${environment}`, {
    env,
    environment,
    description: `S3 buckets and CloudFront for Travel Companion - ${environment}`,
});
// Add tags to all stacks
const tags = {
    Project: 'TravelCompanion',
    Environment: environment,
    Owner: 'TravelCompanionTeam',
    CostCenter: 'Development',
};
Object.entries(tags).forEach(([key, value]) => {
    cdk.Tags.of(app).add(key, value);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1DQUFtQztBQUNuQyxxREFBaUQ7QUFDakQseUNBQXFDO0FBQ3JDLGlEQUE2QztBQUU3QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixtREFBbUQ7QUFDbkQsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksS0FBSyxDQUFDO0FBQ25FLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7QUFDaEQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxXQUFXLENBQUM7QUFFN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUVqQyxNQUFNLEdBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUVoQyw4QkFBOEI7QUFDOUIsTUFBTSxXQUFXLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSw0QkFBNEIsV0FBVyxFQUFFLEVBQUU7SUFDcEYsR0FBRztJQUNILFdBQVc7SUFDWCxXQUFXLEVBQUUsMENBQTBDLFdBQVcsRUFBRTtDQUNyRSxDQUFDLENBQUM7QUFFSCxrQkFBa0I7QUFDbEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBTyxDQUFDLEdBQUcsRUFBRSxzQkFBc0IsV0FBVyxFQUFFLEVBQUU7SUFDcEUsR0FBRztJQUNILFdBQVc7SUFDWCxXQUFXLEVBQUUsb0RBQW9ELFdBQVcsRUFBRTtDQUMvRSxDQUFDLENBQUM7QUFFSCxtREFBbUQ7QUFDbkQsTUFBTSxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsV0FBVyxFQUFFLEVBQUU7SUFDaEYsR0FBRztJQUNILFdBQVc7SUFDWCxjQUFjLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTO0lBQ2hELGNBQWMsRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLFNBQVM7SUFDaEQsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxTQUFTO0lBQ3RELFlBQVksRUFBRSxPQUFPLENBQUMsZUFBZSxDQUFDLFVBQVU7SUFDaEQsV0FBVyxFQUFFLDJEQUEyRCxXQUFXLEVBQUU7Q0FDdEYsQ0FBQyxDQUFDO0FBRUgsbUJBQW1CO0FBQ25CLFdBQVcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdkMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUVuQyx5QkFBeUI7QUFDekIsTUFBTSxJQUFJLEdBQUc7SUFDWCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLEtBQUssRUFBRSxxQkFBcUI7SUFDNUIsVUFBVSxFQUFFLGFBQWE7Q0FDMUIsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtJQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxyXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBEeW5hbW9EQlN0YWNrIH0gZnJvbSAnLi9keW5hbW9kYi1zdGFjayc7XHJcbmltcG9ydCB7IFMzU3RhY2sgfSBmcm9tICcuL3MzLXN0YWNrJztcclxuaW1wb3J0IHsgTGFtYmRhU3RhY2sgfSBmcm9tICcuL2xhbWJkYS1zdGFjayc7XHJcblxyXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xyXG5cclxuLy8gR2V0IGVudmlyb25tZW50IGZyb20gY29udGV4dCBvciBkZWZhdWx0IHRvICdkZXYnXHJcbmNvbnN0IGVudmlyb25tZW50ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW52aXJvbm1lbnQnKSB8fCAnZGV2JztcclxuY29uc3QgYWNjb3VudCA9IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQ7XHJcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB8fCAndXMtZWFzdC0xJztcclxuXHJcbmNvbnNvbGUubG9nKGBEZXBsb3lpbmcgdG8gZW52aXJvbm1lbnQ6ICR7ZW52aXJvbm1lbnR9YCk7XHJcbmNvbnNvbGUubG9nKGBBY2NvdW50OiAke2FjY291bnR9YCk7XHJcbmNvbnNvbGUubG9nKGBSZWdpb246ICR7cmVnaW9ufWApO1xyXG5cclxuY29uc3QgZW52ID0geyBhY2NvdW50LCByZWdpb24gfTtcclxuXHJcbi8vIERlcGxveSBEeW5hbW9EQiBzdGFjayBmaXJzdFxyXG5jb25zdCBkeW5hbW9TdGFjayA9IG5ldyBEeW5hbW9EQlN0YWNrKGFwcCwgYFRyYXZlbENvbXBhbmlvbi1EeW5hbW9EQi0ke2Vudmlyb25tZW50fWAsIHtcclxuICBlbnYsXHJcbiAgZW52aXJvbm1lbnQsXHJcbiAgZGVzY3JpcHRpb246IGBEeW5hbW9EQiB0YWJsZXMgZm9yIFRyYXZlbCBDb21wYW5pb24gLSAke2Vudmlyb25tZW50fWAsXHJcbn0pO1xyXG5cclxuLy8gRGVwbG95IFMzIHN0YWNrXHJcbmNvbnN0IHMzU3RhY2sgPSBuZXcgUzNTdGFjayhhcHAsIGBUcmF2ZWxDb21wYW5pb24tUzMtJHtlbnZpcm9ubWVudH1gLCB7XHJcbiAgZW52LFxyXG4gIGVudmlyb25tZW50LFxyXG4gIGRlc2NyaXB0aW9uOiBgUzMgYnVja2V0cyBhbmQgQ2xvdWRGcm9udCBmb3IgVHJhdmVsIENvbXBhbmlvbiAtICR7ZW52aXJvbm1lbnR9YCxcclxufSk7XHJcblxyXG4vLyBEZXBsb3kgTGFtYmRhIHN0YWNrIChkZXBlbmRzIG9uIER5bmFtb0RCIGFuZCBTMylcclxuY29uc3QgbGFtYmRhU3RhY2sgPSBuZXcgTGFtYmRhU3RhY2soYXBwLCBgVHJhdmVsQ29tcGFuaW9uLUxhbWJkYS0ke2Vudmlyb25tZW50fWAsIHtcclxuICBlbnYsXHJcbiAgZW52aXJvbm1lbnQsXHJcbiAgdXNlcnNUYWJsZU5hbWU6IGR5bmFtb1N0YWNrLnVzZXJzVGFibGUudGFibGVOYW1lLFxyXG4gIHRyaXBzVGFibGVOYW1lOiBkeW5hbW9TdGFjay50cmlwc1RhYmxlLnRhYmxlTmFtZSxcclxuICBib29raW5nc1RhYmxlTmFtZTogZHluYW1vU3RhY2suYm9va2luZ3NUYWJsZS50YWJsZU5hbWUsXHJcbiAgczNCdWNrZXROYW1lOiBzM1N0YWNrLml0aW5lcmFyeUJ1Y2tldC5idWNrZXROYW1lLFxyXG4gIGRlc2NyaXB0aW9uOiBgTGFtYmRhIGZ1bmN0aW9ucyBhbmQgQVBJIEdhdGV3YXkgZm9yIFRyYXZlbCBDb21wYW5pb24gLSAke2Vudmlyb25tZW50fWAsXHJcbn0pO1xyXG5cclxuLy8gQWRkIGRlcGVuZGVuY2llc1xyXG5sYW1iZGFTdGFjay5hZGREZXBlbmRlbmN5KGR5bmFtb1N0YWNrKTtcclxubGFtYmRhU3RhY2suYWRkRGVwZW5kZW5jeShzM1N0YWNrKTtcclxuXHJcbi8vIEFkZCB0YWdzIHRvIGFsbCBzdGFja3NcclxuY29uc3QgdGFncyA9IHtcclxuICBQcm9qZWN0OiAnVHJhdmVsQ29tcGFuaW9uJyxcclxuICBFbnZpcm9ubWVudDogZW52aXJvbm1lbnQsXHJcbiAgT3duZXI6ICdUcmF2ZWxDb21wYW5pb25UZWFtJyxcclxuICBDb3N0Q2VudGVyOiAnRGV2ZWxvcG1lbnQnLFxyXG59O1xyXG5cclxuT2JqZWN0LmVudHJpZXModGFncykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgY2RrLlRhZ3Mub2YoYXBwKS5hZGQoa2V5LCB2YWx1ZSk7XHJcbn0pOyJdfQ==